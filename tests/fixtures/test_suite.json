{
	"tests": [
	  {
		"name": "feature_addition",
		"description": "Adding a new user dashboard component",
		"diff_path": "tests/fixtures/feature_addition.diff",
		"expected_message_path": "tests/fixtures/feature_addition.expected.txt",
		"diff": "diff --git a/src/components/UserDashboard.js b/src/components/UserDashboard.js\nnew file mode 100644\nindex 0000000..a7c42ef\n--- /dev/null\n+++ b/src/components/UserDashboard.js\n@@ -0,0 +1,45 @@\n+import React, { useState, useEffect } from 'react';\n+import { fetchUserStats } from '../api/users';\n+import StatsCard from './StatsCard';\n+import ActivityChart from './ActivityChart';\n+\n+/**\n+ * UserDashboard component displays user statistics and activity.\n+ * \n+ * @param {Object} props - Component props\n+ * @param {string} props.userId - User ID to display dashboard for\n+ * @param {Object} props.filters - Optional filters for the dashboard data\n+ * @returns {JSX.Element} - Dashboard component\n+ */\n+const UserDashboard = ({ userId, filters = {} }) => {\n+  const [stats, setStats] = useState(null);\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    const loadStats = async () => {\n+      try {\n+        setLoading(true);\n+        const data = await fetchUserStats(userId, filters);\n+        setStats(data);\n+        setError(null);\n+      } catch (err) {\n+        setError(err.message);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    loadStats();\n+  }, [userId, filters]);\n+\n+  return (\n+    <div className=\"user-dashboard\">\n+      <h2>User Dashboard</h2>\n+      {loading && <p>Loading dashboard data...</p>}\n+      {error && <p className=\"error\">Error: {error}</p>}\n+      {stats && <StatsCard stats={stats} />}\n+      {stats && <ActivityChart activities={stats.activities} />}\n+    </div>\n+  );\n+};\n+\n+export default UserDashboard;\ndiff --git a/src/api/users.js b/src/api/users.js\nindex 8fab3cd..ea74b2d 100644\n--- a/src/api/users.js\n+++ b/src/api/users.js\n@@ -25,6 +25,22 @@ export const updateUser = async (userId, userData) => {\n   return response.data;\n };\n \n+/**\n+ * Fetch user statistics and activity\n+ * \n+ * @param {string} userId - User ID to fetch stats for\n+ * @param {Object} filters - Optional filters for the stats data\n+ * @returns {Promise<Object>} - User statistics and activity data\n+ */\n+export const fetchUserStats = async (userId, filters = {}) => {\n+  const queryParams = new URLSearchParams(filters).toString();\n+  const url = `/api/users/${userId}/stats${queryParams ? `?${queryParams}` : ''}`;\n+  \n+  const response = await apiClient.get(url);\n+  \n+  return response.data;\n+};\n+\n /**\n  * Delete a user\n  * \ndiff --git a/src/components/index.js b/src/components/index.js\nindex 5e2cf12..a9b742c 100644\n--- a/src/components/index.js\n+++ b/src/components/index.js\n@@ -3,6 +3,7 @@ import Button from './Button';\n import Card from './Card';\n import Input from './Input';\n import Navbar from './Navbar';\n+import UserDashboard from './UserDashboard';\n \n export {\n   Avatar,\n@@ -10,4 +11,5 @@ export {\n   Card,\n   Input,\n   Navbar,\n+  UserDashboard,\n };",
		"expected_message": "feat(dashboard): add user dashboard component with stats and activity chart\n\nImplement new UserDashboard component to display user statistics and activity data. \nAdd fetchUserStats API function to retrieve user data with filtering capabilities.\nExport UserDashboard in components index for easier imports.\n\nThe dashboard includes:\n- Loading and error state handling\n- Stats card for user metrics\n- Activity chart for visualizing user activity"
	  },
	  {
		"name": "bug_fix",
		"description": "Fix input validation for auth functions",
		"diff_path": "tests/fixtures/bug_fix.diff",
		"expected_message_path": "tests/fixtures/bug_fix.expected.txt",
		"diff": "diff --git a/src/auth/validation.js b/src/auth/validation.js\nindex cdef123..abcd456 100644\n--- a/src/auth/validation.js\n+++ b/src/auth/validation.js\n@@ -15,7 +15,7 @@ export const validateEmail = (email) => {\n  * @returns {boolean} True if password meets requirements\n  */\n export const validatePassword = (password) => {\n-  if (!password || password.length < 8) {\n+  if (!password || typeof password !== 'string' || password.length < 8) {\n     return false;\n   }\n   \n@@ -42,7 +42,11 @@ export const validateLoginForm = (data) => {\n   const errors = {};\n   \n   // Validate email\n-  if (!validateEmail(data.email)) {\n+  if (!data || !data.email) {\n+    errors.email = 'Email is required';\n+  }\n+  \n+  if (data && data.email && !validateEmail(data.email)) {\n     errors.email = 'Please enter a valid email address';\n   }\n   \n@@ -67,7 +71,7 @@ export const validateToken = (token) => {\n     return false;\n   }\n   \n-  const parts = token.split('.');\n+  const parts = String(token).split('.');\n   \n   // JWT tokens have 3 parts\n   if (parts.length !== 3) {\ndiff --git a/tests/auth/validation.test.js b/tests/auth/validation.test.js\nindex fedc876..1234abc 100644\n--- a/tests/auth/validation.test.js\n+++ b/tests/auth/validation.test.js\n@@ -25,6 +25,18 @@ describe('validatePassword', () => {\n     expect(validatePassword('short')).toBe(false);\n   });\n   \n+  it('should reject non-string passwords', () => {\n+    expect(validatePassword(null)).toBe(false);\n+    expect(validatePassword(undefined)).toBe(false);\n+    expect(validatePassword(123456789)).toBe(false);\n+    expect(validatePassword({})).toBe(false);\n+  });\n+  \n+  it('should validate proper passwords', () => {\n+    expect(validatePassword('correctpassword')).toBe(true);\n+    expect(validatePassword('Password123')).toBe(true);\n+  });\n+  \n   // ... other password tests\n });\n \n@@ -35,6 +47,11 @@ describe('validateLoginForm', () => {\n     expect(errors.email).toBeDefined();\n   });\n   \n+  it('should handle null input data', () => {\n+    const errors = validateLoginForm(null);\n+    expect(errors.email).toBeDefined();\n+  });\n+  \n   // ... other form validation tests\n });\n \n@@ -44,4 +61,10 @@ describe('validateToken', () => {\n     expect(validateToken('')).toBe(false);\n   });\n   \n+  it('should handle non-string tokens', () => {\n+    expect(validateToken(null)).toBe(false);\n+    expect(validateToken(undefined)).toBe(false);\n+    expect(validateToken(123)).toBe(false);\n+  });\n+  \n });",
		"expected_message": "fix(auth): improve input validation for auth functions\n\nAdd type checking and null handling to prevent validation errors:\n- Check if password is a string before validation\n- Add null checks for login form data\n- Convert token to string before splitting\n- Handle non-string tokens properly\n\nAdd test cases to verify the fixes for:\n- Non-string passwords\n- Null form data\n- Non-string tokens"
	  }
	]
  }